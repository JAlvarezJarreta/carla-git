#!/usr/bin/perl

=head1 Description

Give a breakdown of running/pending jobs on the farm, as well as a per-pipeline
summary. For a comprehensive overview of pipeline statuses, add the following
aliases to your .bashrc file:

bold=$(tput bold)
normal=$(tput sgr0)
alias pipeview="farm_use_hist; echo '${bold}Priority:${normal}'; farm_priority_shared; echo ''; echo '${bold}Server stats:${normal}'; dbc_processlist"
alias farm_priority_shared="bhpart AllHosts | grep -e $USER -e $SHARED_USER1 -e $SHARED_USER2 | awk '{print \$1 \"    \" \$3}'"

Note the secondary_users variable. If you run pipelines using secondary virtual users, add
the usernames here and the script will also give some minimal stats on what's running there too

=cut

use strict;
use warnings;
use Getopt::Long;
use Term::ANSIColor;
use POSIX;
use Data::Dumper;

my @color_list = ('green', 'red', 'yellow');
my $width = 100;
our $scale_factor = $width/100;
my @all_bjobs = `bjobs -w -u all`;
my $primary_user    = $ENV{USER};
my @secondary_users = ('compara_ensembl', 'enscompara-prod1');
my $genebuild_user;
GetOptions(
    "g" => \$genebuild_user,
);
@secondary_users = ('genebuild') if ($genebuild_user);

my %users_hash = map {$_ => 1} @secondary_users;
$users_hash{$primary_user} = 1;

my (%pipeline_counts, %pipeline_counts_sec);
my ( $abs_total, $running_all, $pending_all, $running_user, $pending_user ) = (0,0,0,0,0);
foreach my $job ( @all_bjobs ) {
    my ($job_id, $job_user, $job_stat, $job_queue, $job_from_host, $job_exec_host, $job_name, $job_submit_time) = split( /\s+/, $job );
    $abs_total++ if $job_user eq $primary_user;
    if ( $job_stat eq 'RUN' ){
        $running_all++;
        $running_user++ if $job_user eq $primary_user;

        if ( $users_hash{$job_user} ) {
            if ($job_name =~ m/(.+)-Hive-/) {
                $pipeline_counts{$job_user}->{$1}->{run}++;
            }
        }
    }
    elsif ( $job_stat eq 'PEND' ) {
        $pending_all++;
        $pending_user++ if $job_user eq $primary_user;

        if ( $users_hash{$job_user} ) {
            if ($job_name =~ m/(.+)-Hive-/) {
                $pipeline_counts{$job_user}->{$1}->{pend}++;
            }
        }
    }
}

my $total_all = $running_all + $pending_all;
my $total_user = $running_user + $pending_user;

# print "Totals:\n";
print(colored( ['bold white'], 'Totals:' ) . "\n");
create_multi_bar($running_all, $running_user, $total_all, "RUN  ", 'top');
create_multi_bar($pending_all, $pending_user, $total_all, "PEND ", 'bottom');

# print "\nPersonal Breakdown:\n";
print "\n";
print(colored( ['bold white'], 'Personal Breakdown:' ) . "\n");
personal_breakdown( $running_user, $pending_user, $abs_total );

# print "\nPipelines:\n";
print "\n";
print(colored( ['bold white'], 'Pipelines:' ) . "\n");
pipeline_breakdown( \%pipeline_counts );

sub create_multi_bar {
    my ($val, $subval, $total, $label, $perc_label_loc) = @_;

    # prepare variables
    $label = "COUNT " unless ( defined $label );
    my $sub_perc = ceil(($subval/$total)*100);
    my $val_perc = ($val/$total)*100;
    my $leftover = $val_perc-$sub_perc;
    $perc_label_loc = undef unless ( $perc_label_loc eq 'top' || $perc_label_loc eq 'bottom' );

    my $perc_label;
    if ( defined $perc_label_loc ) {
        my $pre_padding = ' ' x (length($label) + 1 + ($sub_perc*$scale_factor));
        my $sp          = sprintf "%.2f", ($subval/$val)*100;
        my $perc_str    = "|$sp%";
        $perc_label     = "$pre_padding$perc_str\n";
    }

    print $perc_label if ( $perc_label_loc eq 'top' );

    # print tag and start of bar
    print( colored( [$color_list[0]], $label . '|') );

    # print sub-bar, scaled down
    print( colored( [$color_list[1]], '=' x ($sub_perc*$scale_factor) ) );
    print '|' if ( defined $perc_label );

    # print value bar
    print( colored( [$color_list[2]], '=' x ($leftover*$scale_factor) ) );

    # print padding
    print ' ' x ((100*$scale_factor)-$val_perc);

    # print counts
    print( colored( [$color_list[0]], '| '    ) );
    print( colored( [$color_list[1]], "$primary_user:$subval" ) );
    print '/';
    print( colored( [$color_list[2]], "all:$val"    ) );
    print "\n";
    print $perc_label if ( $perc_label_loc eq 'bottom' );
}

sub personal_breakdown {
    my ( $run, $pend, $total ) = @_;

    print( colored( [$color_list[1]], '     |' ) );

    my ( $run_perc, $pend_perc, $other, $other_perc );
    if ($total == 0) {
        ( $run_perc, $pend_perc, $other, $other_perc ) = (0,0,0,100);
    } else {
        $run_perc   = ($run/$total)*100;
        $pend_perc  = ceil(($pend/$total)*100);
        $other      = $total-($run+$pend);
        $other_perc = 100-($run_perc+$pend_perc);
    }

    # print Dumper {run_perc=>$run_perc, pend_perc=>$pend_perc, other_perc=>$other_perc};

    print( colored( [$color_list[0]], '=' x ($run_perc*$scale_factor) ) );
    print '|';
    print( colored( [$color_list[2]], '=' x ($pend_perc*$scale_factor) ) );
    print '=' x ($other_perc*$scale_factor);
    print( colored( [$color_list[1]], "| " ) );

    print( colored( [$color_list[0]], "RUN:$run" ) );
    print "/";
    print( colored( [$color_list[2]], "PEND:$pend" ) );
    print "/OTHER:$other";
    print "\n";

    my $perc_label = " " x ($run_perc*$scale_factor);
    if ( $total == 0 ) {
        $perc_label .= "0.00%\n";
    } else {
        my $this_perc = ($run/$total)*100;
        $perc_label .= $this_perc == 100 ? '100.0' : sprintf "%.2f", $this_perc;
        $perc_label .= "%|\n";
    }
    print $perc_label;
}

sub pipeline_breakdown {
    my $counts = shift;

    unless (%$counts) {
        print "None\n";
        return;
    }

    my $max_len = 0;
    for my $x ( values %$counts ) {
        for my $y ( keys %$x ) {
            $max_len = length($y) + 1 if ( $max_len < length($y) );
        }
    }

    my @user_order = grep { $_ ne $primary_user} keys %$counts;
    unshift @user_order, $primary_user;

    # print _pad('Name', $max_len) . "\tRun\tPend\tUser\n";
    print( colored( [$color_list[0]], _pad('Name', $max_len) . "\tRun\tPend\tUser" ) . "\n" );
    for my $user_name ( @user_order ) {
        for my $pipe_name ( keys %{$counts->{$user_name}} ) {
            my $this_run = $counts->{$user_name}->{$pipe_name}->{run} || 0;
            my $this_pend = $counts->{$user_name}->{$pipe_name}->{pend} || 0;
            print join( "\t", _pad($pipe_name, $max_len), $this_run, $this_pend, $user_name );
            print "\n";
        }
    }
    print "\n";
}

sub _pad {
    my ($s, $pad_len) = @_;

    my $diff = $pad_len - length($s);
    my $pad  = " " x ($diff*$scale_factor);
    return "$s$pad";
}
