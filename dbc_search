#!/usr/bin/perl

=head1 Description

Search a list of servers for a given search term. Note the default group (l.25)
and group aliases (l.29)

=cut

use strict;
use warnings;
use Term::ANSIColor;

use JSON;
use Data::Dumper;
use Getopt::Long;
use Cwd 'abs_path';

use Bio::EnsEMBL::Utils::IO qw (slurp);

my ($group, $type, $server_regex, $servers_json_file, $help);
GetOptions(
    "g|group=s"        => \$group,
    "t|type=s"         => \$type,
    "s|server=s"       => \$server_regex,
    "j|servers_json=s" => \$servers_json_file,
    "h|help"           => \$help,
);

$type = $group if !$type and $group;
$type = 'comp' if !$type;
&helptext if ( $help );

my %type_aliases = (
	'production' => 'production',
	'prod'       => 'production',
	'pr'         => 'production',
	'p'          => 'production',
	'genebuild'  => 'genebuild',
	'gene'       => 'genebuild',
	'gb'         => 'genebuild',
	'g'          => 'genebuild',
	'compara'    => 'compara',
	'comp'       => 'compara',
	'cp'         => 'compara',
	'c'          => 'compara',
	'eg'         => 'eg',
	'ensembl_genomes' => 'eg',
    'sta'        => 'staging',
    's'          => 'staging',
    'mirr'       => 'mirror',
    'm'          => 'mirror',
);

$type = $type_aliases{$type} if $type;

if ( ! $servers_json_file ) {
    $servers_json_file = abs_path($0);
    $servers_json_file =~ s/dbc_search/servers_per_group.json/;
}
my $server_types = decode_json(slurp($servers_json_file)) or die "Cannot open $servers_json_file";

my @type_order = ( 'mirror', 'staging', 'production', 'genebuild', 'eg', 'compara' );


my @these_servers;
if ( ! $type || $type eq 'all' ) {
	foreach my $this_type ( @type_order ) {
		push( @these_servers, @{ $server_types->{$this_type} } );
	}
} elsif ( grep( /^$type$/, keys %$server_types )) {
	@these_servers = @{ $server_types->{$type} };
} else {
	my $available_types = join( "\n- ", @type_order );
	die "Cannot find server type '$type'. The following are defined:\n- $available_types\n";
}

my $query = $ARGV[0] // '';

foreach my $server ( @these_servers ) {
	next if ( $server_regex && !($server =~ /$server_regex/ig) );
    # print( colored( ['', 'cyan', ''], "$server\n" ) );
    my @dbs = `$server -e \"SHOW DATABASES LIKE '%$query%'\" 2> /dev/null`;
    next unless $dbs[0];
    chomp @dbs;
    shift @dbs;
    foreach my $dbname ( @dbs ) {
        if (-p STDOUT) {
            print "$server $dbname\n";
        } else {
            print( colored( ['', 'cyan', ''], "$server" ) );
            print " $dbname\n";
        }
    }
    # print join("\n", map {"$server $_"} @dbs);
    print "\n";
}

sub helptext {
	my $message = <<"END_MESSAGE";
Usage: dbc_search [options] search_term

* Options:
  -g|group   server group to search
  -s|server  regex of server to search
  -h|help    this help message, duh!

* Server groups:
  - production (or prod, pr, p)
  - genebuild  (or gene, gb, g)
  - eg         (or ensembl_genomes)
  - compara    (or comp, cp, c)

END_MESSAGE
   	print $message;
   	exit(0);
}

1;
